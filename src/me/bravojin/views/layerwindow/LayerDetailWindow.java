package me.bravojin.views.layerwindow;

import me.bravojin.LayerContent.LayerContent;
import me.bravojin.controller.layerDetail.LayerDetailClose;
import me.bravojin.controller.layerDetail.LayerDetailList;
import me.bravojin.views.mainwindow.MainWindow;

import javax.swing.*;
import java.awt.*;
import java.util.Vector;

/**
 * Created by tyrionlanister on 15-6-15.
 */
public class LayerDetailWindow {
    private JLabel PreviewLabel;
    private JButton previewButton;
    private JButton deleteButton;
    private JButton yesButton;
    private JButton cancelButton;
    private JList layerJList;
    private JPanel JPanel1;
    private JPanel LeftPanel;
    private JPanel RightPanel;

    private MainWindow mainWindow;
    private LayerContent layerContent;
    private LayerDetailClose layerDetailClose;

    private LayerDetailList layerDetailList;

    private int selectedIndex;

    public LayerDetailWindow() {
        this.LeftPanel.setPreferredSize(new Dimension(400, 500));
        this.RightPanel.setPreferredSize(new Dimension(300, 500));
        this.layerDetailList = new LayerDetailList(this, layerContent);
    }

    public JPanel getPanel1() {
        return this.JPanel1;
    }

    public LayerDetailWindow setLayerDetailClose(LayerDetailClose layerDetailClose) {
        this.layerDetailClose = layerDetailClose;
        return this;
    }

    public LayerDetailWindow setLayerContent(LayerContent layerContent) {
        this.layerContent = layerContent;
        this.layerDetailList.setLayerContent(layerContent);
        return this;
    }

    public LayerDetailWindow setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
        return this;
    }

    public LayerDetailWindow setSelectedIndex(int selectedIndex) {
        this.selectedIndex = selectedIndex;
        return this;
    }

    public LayerDetailWindow updateList() {
        Vector<String> vector = this.layerDetailList.update(this.selectedIndex);
        if (vector == null) {
            return null;
        } else {
            this.setLayerJList(vector);
        }
        return this;
    }

    private LayerDetailWindow setLayerJList(Vector<String> vector) {
        this.layerJList.setListData(vector);
        return this;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        JPanel1 = new JPanel();
        JPanel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        LeftPanel = new JPanel();
        LeftPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        JPanel1.add(LeftPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        LeftPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        PreviewLabel = new JLabel();
        PreviewLabel.setText("");
        scrollPane1.setViewportView(PreviewLabel);
        final JToolBar toolBar1 = new JToolBar();
        LeftPanel.add(toolBar1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        previewButton = new JButton();
        previewButton.setText("Preview");
        toolBar1.add(previewButton);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        toolBar1.add(spacer1);
        RightPanel = new JPanel();
        RightPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        JPanel1.add(RightPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        RightPanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(400, 300), null, 0, false));
        layerJList = new JList();
        scrollPane2.setViewportView(layerJList);
        final JToolBar toolBar2 = new JToolBar();
        RightPanel.add(toolBar2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Delete");
        toolBar2.add(deleteButton);
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        toolBar2.add(toolBar$Separator1);
        yesButton = new JButton();
        yesButton.setText("Yes");
        toolBar2.add(yesButton);
        final JToolBar.Separator toolBar$Separator2 = new JToolBar.Separator();
        toolBar2.add(toolBar$Separator2);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        toolBar2.add(cancelButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return JPanel1;
    }
}
